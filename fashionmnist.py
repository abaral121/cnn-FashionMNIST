# -*- coding: utf-8 -*-
"""FashionMNIST.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1S5zKDhyAnRATftuBVZ5yQCKYmiKKZ_R8
"""

import torch
import torch.nn as nn
import torch.nn.functional as F
import torchvision
import torchvision.transforms as transforms
import matplotlib.pyplot as plt
import numpy as np
from collections import Counter
from sklearn.metrics import confusion_matrix
import seaborn as sns
import pandas as pd

# Creating paramters
input_size = 784
hidden_size = 100
num_classes = 10
batch_size = 100
learning_rate = 0.001
num_epochs = 15

# Transforms
transform = transforms.Compose(
    [transforms.ToTensor(),
     #transforms.Normalize((0.5, 0.5, 0.5), (0.5, 0.5, 0.5))
     ]
)

# Downloading data
train_dataset = torchvision.datasets.FashionMNIST(root = './datasets', train = True, transform=transform, download = True)
test_dataset = torchvision.datasets.FashionMNIST(root = './datasets', train = False, transform=transform, download = True)

train_loader = torch.utils.data.DataLoader(train_dataset, batch_size=100, shuffle=True)
test_loader = torch.utils.data.DataLoader(test_dataset, batch_size=100, shuffle=False)

images, labels = iter(train_loader).next()
print(images.shape, labels.shape)

# Creating label names
classes = ("T-shirt", 'Trouser', 'Pullover', 'Dress', 'Coat', 'Sandal', 'Shirt', 'Sneaker', 'Bag', 'Ankle Boot')

# Displaying sample images
for i in range(10):
  plt.subplot(2,5,i+1)
  plt.imshow(images[i][0], cmap = 'gray')
  plt.title('{}'.format(classes[labels[i]]))
  plt.show

# Counting number of images per class
cnt = Counter()
for i in range(len(train_dataset)):
  a = train_dataset[i][1]
  cnt[a] += 1
print(cnt)

class ConvNet(nn.Module):
    def __init__(self):
        super(ConvNet, self).__init__()
    
        self.conv_layer = nn.Sequential(
            # Conv layer 1
            nn.Conv2d(in_channels=1, out_channels=32, kernel_size=3, padding=1),
            nn.BatchNorm2d(32),
            nn.ReLU(),
            nn.MaxPool2d(2,2),

            # Conv layer 2
            nn.Conv2d(in_channels=32, out_channels=64, kernel_size=3),
            nn.BatchNorm2d(64),
            nn.ReLU(),
            nn.MaxPool2d(2)
        )

        self.fc_layer = nn.Sequential(
            nn.Linear(in_features=64*6*6, out_features=600),
            nn.Linear(in_features=600, out_features=120),
            nn.Linear(in_features=120, out_features=10)
        )

    def forward(self, x):
      # conv layers
      x = self.conv_layer(x)
          
      # flatten
      x = x.view(x.size(0), -1)
          
      # fc layer
      x = self.fc_layer(x)

      return x

W = 14
K = 3
P = 0
S = 1

((W-K+2*P)/S)+1

# Creating valdation funciton
def validate():
    with torch.no_grad():
      val_n_correct = 0
      val_n_samples = 0

      val_images, val_labels = next(iter(test_loader))
      val_outputs = model(val_images)
      val_loss = criterion(val_outputs, val_labels)
      # max returns (value ,index)
      _, val_predicted = torch.max(val_outputs, 1)
      val_n_samples += val_labels.size(0)
      val_n_correct += (val_predicted == val_labels).sum().item()

      return val_loss, (val_n_correct/val_n_samples)

model = ConvNet()
criterion = nn.CrossEntropyLoss()
optimizer = torch.optim.Adam(model.parameters(), lr = learning_rate)

device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')
device

# Traning model
n_total_steps = len(train_loader)
num_epochs = 12
for epoch in range(num_epochs):
    for i, (images, labels) in enumerate(train_loader):
        
        images = images
        labels = labels

        # Forward pass
        outputs = model(images)
        loss = criterion(outputs, labels)

        # Backward and optimize
        optimizer.zero_grad()
        loss.backward()
        optimizer.step()

        # Print train and validation figures
        if (i+1) % 100 == 0:
          val_loss, val_acc = validate()
          print (f'Epoch [{epoch+1}/{num_epochs}], Step [{i+1}/{n_total_steps}], Train Loss: {loss.item():.4f}, Val Loss:{val_loss:.4f}, Val Acc:{val_acc:.4f}')

with torch.no_grad():
    n_correct = 0
    n_samples = 0
    n_class_correct = [0 for i in range(10)]
    n_class_samples = [0 for i in range(10)]
    all_pred = []

    for images, labels in test_loader:
        images = images
        labels = labels
        outputs = model(images)
        # max returns (value ,index)
        _, predicted = torch.max(outputs, 1)
        n_samples += labels.size(0)
        n_correct += (predicted == labels).sum().item()
        
        for i in range(batch_size):
            label = labels[i]
            pred = predicted[i]
            all_pred.append(pred)
            if (label == pred):
                n_class_correct[label] += 1
            n_class_samples[label] += 1

    acc = 100.0 * n_correct / n_samples
    print(f'Accuracy of the network: {acc} %')

    for i in range(10):
        acc = 100.0 * n_class_correct[i] / n_class_samples[i]
        print(f'Accuracy of {classes[i]}: {acc} %')

# Combining actual and preds together
a = torch.tensor(test_dataset.targets)
b = torch.stack(all_pred)
stacked = torch.stack((a,b), dim =1 )

# Building confusion matrix
cm = confusion_matrix(a,b)
cm

# Displaying confusion matrix
df_cm = pd.DataFrame(cm, index = [i for i in classes ],
                  columns = [i for i in classes])
plt.figure(figsize = (15,15))
sns.heatmap(df_cm, annot=True, cmap="Blues", fmt = 'g', cbar = False)

